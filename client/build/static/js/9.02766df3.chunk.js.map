{"version":3,"sources":["components/Notice/index.js","actions/aff.js","components/pages/user/Forms/Achievement.js","components/pages/user/Forms/Strength.js","components/pages/user/Forms/Gratitude.js","components/pages/user/Affirm.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_2__","react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_2___default","connect","state","notices","notice","_ref","length","map","a","createElement","key","id","variant","noticeType","msg","newAffirmation","formData","history","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","text","dateAdded","affirmationType","title","dateAchieved","madeMeFeel","author","config","body","jsonBody","res","errors","wrap","_context","prev","next","localStorage","token","setAuthToken","headers","Content-Type","JSON","stringify","axios","post","sent","type","ADD_AFF_SUCCESS","payload","data","setNotice","push","t0","response","forEach","error","ADD_AFF_FAIL","stop","_x","apply","this","arguments","user","auth","count","affirmations","withRouter","_useState","useState","_useState2","slicedToArray","setFormData","onChange","e","objectSpread","defineProperty","target","name","value","react_default","Row","Col","xs","className","Form","onSubmit","preventDefault","Notice","Group","Control","placeholder","as","Label","htmlFor","Button","block","image","console","log","readOnly","randComp","setRandComp","useEffect","Forms_Achievement","Forms_Strength","Forms_Gratitude","Math","random"],"mappings":"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","file":"static/js/9.02766df3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Alert from 'react-bootstrap/Alert';\n\nconst Notice = ({ notices }) =>\n  notices !== null &&\n  notices.length > 0 &&\n  notices.map(notice => (\n    <Alert key={notice.id} variant={notice.noticeType}>\n      {notice.msg}\n    </Alert>\n  ));\n\nNotice.propTypes = {\n  notices: PropTypes.array.isRequired\n};\n\n// ! Get the notice state\nconst mapStateToProps = state => ({\n  // ! state = our root reducer, so we have access to notice\n  notices: state.notice\n});\n\nexport default connect(mapStateToProps)(Notice);\n","import axios from 'axios';\nimport { setNotice } from './notice';\nimport { ADD_AFF_SUCCESS, ADD_AFF_FAIL } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// * Create New Affirmationn\n\nexport const newAffirmation = (formData, history) => async dispatch => {\n  if (localStorage.token) setAuthToken(localStorage.token);\n\n  const {\n    text,\n    dateAdded,\n    affirmationType,\n    title,\n    dateAchieved,\n    madeMeFeel,\n    author\n  } = formData;\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  let body = {};\n  if (text) body.text = text;\n  if (dateAdded) body.dateAdded = dateAdded;\n  if (affirmationType) body.affirmationType = affirmationType;\n  if (title) body.title = title;\n  if (dateAchieved) body.dateAchieved = dateAchieved;\n  if (madeMeFeel) body.madeMeFeel = madeMeFeel;\n  if (author) body.author = author;\n\n  const jsonBody = JSON.stringify(body);\n\n  try {\n    if (body.madeMeFeel) {\n      var res = await axios.post('/api/aff/achievement', jsonBody, config);\n    } else {\n      res = await axios.post('/api/aff', jsonBody, config);\n    }\n\n    dispatch({ type: ADD_AFF_SUCCESS, payload: res.data });\n    dispatch(setNotice('You saved an affirmation! Add another?', 'success'));\n    history.push('/affirm');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setNotice(error.msg, 'danger')));\n    }\n\n    dispatch({ type: ADD_AFF_FAIL });\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Achievement = ({ newAffirmation, setNotice, count, history }) => {\n  const [formData, setFormData] = useState({\n    text: '',\n    affirmationType: 'achievement',\n    title: '',\n    dateAchieved: '',\n    madeMeFeel: ''\n  });\n\n  const { text, title, dateAchieved, madeMeFeel } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    newAffirmation(formData, history);\n  };\n\n  return (\n    <Row>\n      <Col xs={12} className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form onSubmit={e => onSubmit(e)}>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''}What is an{' '}\n              <strong>achievement</strong> you are proud of?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Control\n                type='text'\n                name='title'\n                placeholder='Achievement'\n                onChange={e => onChange(e)}\n                value={title}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Control\n                as='textarea'\n                name='text'\n                placeholder='Description'\n                onChange={e => onChange(e)}\n                value={text}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Control\n                type='text'\n                name='madeMeFeel'\n                placeholder='Compelete the sentence. This achievement made me feel...'\n                onChange={e => onChange(e)}\n                value={madeMeFeel}\n              />\n            </Form.Group>\n            <Form.Label>\n              <Form.Label htmlFor='dateAchieved'>Date Achieved:</Form.Label>\n              <Form.Control\n                type='date'\n                name='dateAchieved'\n                onChange={e => onChange(e)}\n                value={dateAchieved}\n              />\n            </Form.Label>\n\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nAchievement.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(withRouter(Achievement));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Strength = ({ newAffirmation, setNotice, count }) => {\n  const [formData, setFormData] = useState({\n    text: '',\n    image: '',\n    dateAdded: '',\n    affirmationType: 'strength',\n    title: '',\n    dateAchieved: '',\n    madeMeFeel: ''\n  });\n\n  const {\n    text,\n    image,\n    dateAdded,\n    affirmationType,\n    title,\n    dateAchieved,\n    madeMeFeel,\n    author\n  } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    console.log(formData);\n    newAffirmation(formData);\n  };\n\n  return (\n    <Row>\n      <Col xs={12} className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form onSubmit={e => onSubmit(e)}>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''} What is one of\n              your <strong>strengths</strong>?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Control\n                type='text'\n                name='text'\n                placeholder='Strength'\n                onChange={e => onChange(e)}\n                value={text}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nStrength.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(Strength);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Gratitude = ({ newAffirmation, setNotice, count }) => {\n  const [formData, setFormData] = useState({\n    text: '',\n    image: '',\n    dateAdded: '',\n    affirmationType: 'gratitude',\n    title: '',\n    dateAchieved: '',\n    madeMeFeel: ''\n  });\n\n  const {\n    text,\n    image,\n    dateAdded,\n    affirmationType,\n    title,\n    dateAchieved,\n    madeMeFeel,\n    author\n  } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    console.log(formData);\n    newAffirmation(formData);\n  };\n\n  return (\n    <Row>\n      <Col xs={12} className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form onSubmit={e => onSubmit(e)}>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''}What is one thing\n              you're <strong>grateful</strong> for?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Control\n                type='text'\n                name='achievementType'\n                placeholder='Gratitude'\n                value={'gratitude'}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Control\n                type='text'\n                name='text'\n                placeholder='Gratitude'\n                onChange={e => onChange(e)}\n                value={text}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nGratitude.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(Gratitude);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { newAffirmation } from '../../../actions/aff';\nimport { setNotice } from '../../../actions/notice';\n\nimport Achievement from './Forms/Achievement';\nimport Quote from './Forms/Achievement';\nimport Strength from './Forms/Strength';\nimport Gratitude from './Forms/Gratitude';\n\nconst Affirm = ({ newAffirmation, setNotice }) => {\n  const [randComp, setRandComp] = useState();\n\n  useEffect(() => {\n    setRandComp(\n      [<Achievement />, <Strength />, <Quote />, <Gratitude />][\n        ~~(Math.random() * 4)\n      ]\n    );\n  }, []);\n\n  return randComp || '';\n};\n\nAffirm.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the main component function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(Affirm);\n"],"sourceRoot":""}