{"version":3,"sources":["components/pages/user/Affirmation.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","react_bootstrap__WEBPACK_IMPORTED_MODULE_2__","react_bootstrap__WEBPACK_IMPORTED_MODULE_3__","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","react_moment__WEBPACK_IMPORTED_MODULE_5__","react_moment__WEBPACK_IMPORTED_MODULE_5___default","connect","state","affirmations","auth","user","_ref","_ref$affirmations","achievements","quotes","strengths","gratitudes","masterArray","length","forEach","a","push","q","s","g","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffler","_masterArray$","text","affirmationType","author","title","dateAchieved","madeMeFeel","console","log","createElement","Fragment","className","Body","Title","Text","Img","variant","src","strOrGrat","quote","format","xs","md","achievement"],"mappings":"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","file":"static/js/10.1cc2101d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Moment from 'react-moment';\n\nconst Affirmation = ({\n  affirmations: { achievements, quotes, strengths, gratitudes }\n}) => {\n  let masterArray = [];\n  if (achievements.length) achievements.forEach(a => masterArray.push(a));\n  if (quotes.length) quotes.forEach(q => masterArray.push(q));\n  if (strengths.length) strengths.forEach(s => masterArray.push(s));\n  if (gratitudes.length) gratitudes.forEach(g => masterArray.push(g));\n\n  const shuffler = array => {\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n  shuffler(masterArray);\n\n  // * Destructure affirmation object\n  const {\n    text,\n    affirmationType,\n    author,\n    title,\n    dateAchieved,\n    madeMeFeel\n  } = masterArray[0];\n\n  console.log(affirmationType);\n\n  const strOrGrat = (affirmationType, text) => (\n    <>\n      <Card className='strGratCard'>\n        <Card.Body>\n          <Card.Title>\n            {affirmationType === 'strength' ? (\n              <h2>\n                You may not feel it now but remember, you are{' '}\n                <strong>strong</strong> enough.\n              </h2>\n            ) : (\n              <h2>\n                It may not feel like it now, but try to remember what you're\n                <strong>grateful</strong> for.\n              </h2>\n            )}\n          </Card.Title>\n          <Card.Text>\n            <em>On a better day, you told us this:</em>\n            <p className='quote'>&ldquo;{text}&rdquo;</p>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img\n          variant='bottom'\n          src={\n            'https://images.pexels.com/photos/430207/pexels-photo-430207.jpeg'\n          }\n        />\n      </Card>\n    </>\n  );\n\n  const quote = (text, author) => (\n    <>\n      <Card className='quoteCard'>\n        <Card.Body>\n          <Card.Title>\n            <h2>\n              Here's one of your <strong>favorite quotes</strong> to brighten up\n              your day.\n            </h2>\n          </Card.Title>\n          <Card.Text>\n            <p className='quote'>\n              &ldquo;{text}&rdquo; <br /> &mdash;{author}\n            </p>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img\n          variant='bottom'\n          src={\n            'https://images.pexels.com/photos/430207/pexels-photo-430207.jpeg'\n          }\n        />\n      </Card>\n    </>\n  );\n\n  const achievement = (title, text, dateAchieved, madeMeFeel) => (\n    <>\n      <Card className='achievementCard'>\n        <Card.Body>\n          <Card.Title>\n            <h2>\n              Look back at your <strong>accomplishments</strong>.\n            </h2>\n          </Card.Title>\n          <Card.Text>\n            <p>\n              <em>Remember this one?</em>\n            </p>\n            <p className='achievement title'>&ldquo;{title}&rdquo;</p>\n            <p className='achievement date'>\n              on <Moment format='MMMM DD, YYYY'>{dateAchieved}</Moment>\n            </p>\n            <Row>\n              <Col xs={12} md={6}>\n                <p className='achievement text'>\n                  What you said about it: &ldquo;{text}&rdquo;\n                </p>\n              </Col>\n              <Col xs={12} md={6}>\n                <p className='achievement text text-md-right'>\n                  How It Felt: &ldquo;{madeMeFeel}&rdquo;\n                </p>\n              </Col>\n            </Row>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img\n          variant='bottom'\n          src={\n            'https://images.pexels.com/photos/430207/pexels-photo-430207.jpeg'\n          }\n        />\n      </Card>\n    </>\n  );\n\n  return (\n    <>\n      {affirmationType !== 'achievement' && affirmationType !== 'quote'\n        ? strOrGrat(affirmationType, text)\n        : affirmationType !== 'achievement'\n        ? quote(text, author)\n        : achievement(title, text, dateAchieved, madeMeFeel)}\n    </>\n  );\n};\n\nAffirmation.propTypes = {\n  affirmations: PropTypes.object.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  affirmations: state.auth.user.affirmations\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions\n\nexport default connect(mapStateToProps)(Affirmation);\n"],"sourceRoot":""}