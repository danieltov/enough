{"version":3,"sources":["components/Notice/index.js","actions/aff.js","components/pages/user/Forms/Achievement.js","components/pages/user/Forms/Quote.js","components/pages/user/Forms/Strength.js","components/pages/user/Forms/Gratitude.js","components/pages/user/Affirm.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_2__","connect","state","notices","notice","_ref","length","map","a","createElement","key","id","variant","noticeType","msg","newAffirmation","formData","history","Object","_Users_daniel_Developer_projects_enough_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_daniel_Developer_projects_enough_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","dispatch","text","dateAdded","affirmationType","title","dateAchieved","madeMeFeel","author","config","body","jsonBody","res","errors","wrap","_context","prev","next","localStorage","token","setAuthToken","headers","Content-Type","JSON","stringify","axios","post","sent","type","ADD_AFF_SUCCESS","payload","data","setNotice","loadUser","push","t0","response","forEach","error","ADD_AFF_FAIL","stop","_x","apply","this","arguments","deleteAffirmation","_ref2","_callee2","path","_context2","concat","delete","DELETE_AFF_SUCCESS","DELETE_AFF_FAIL","_x2","user","auth","count","affirmations","withRouter","initState","_useState","useState","_useState2","slicedToArray","setFormData","onChange","e","objectSpread2","defineProperty","target","name","value","react_default","Row","className","Col","xs","md","Form","onSubmit","preventDefault","autoComplete","Notice","Group","Label","htmlFor","Control","placeholder","as","Button","block","randComp","setRandComp","useEffect","Forms_Achievement","Forms_Strength","Forms_Quote","Forms_Gratitude","Math","random"],"mappings":"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","file":"static/js/8.05232814.chunk.js","sourcesContent":["// * ==================== REACT ==================== *//\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// * ==================== REDUX ==================== *//\nimport { connect } from 'react-redux';\n\n// * ==================== VIEW COMPONENTS ==================== *//\nimport Alert from 'react-bootstrap/Alert';\n\nconst Notice = ({ notices }) =>\n  notices !== null &&\n  notices.length > 0 &&\n  notices.map(notice => (\n    <Alert key={notice.id} variant={notice.noticeType}>\n      {notice.msg}\n    </Alert>\n  ));\n\nNotice.propTypes = {\n  notices: PropTypes.array.isRequired\n};\n\n// ! Get the notice state\nconst mapStateToProps = state => ({\n  // ! state = our root reducer, so we have access to notice\n  notices: state.notice\n});\n\nexport default connect(mapStateToProps)(Notice);\n","// * ==================== IMPORTS ==================== *//\nimport axios from 'axios';\nimport { setNotice } from './notice';\nimport {\n  ADD_AFF_SUCCESS,\n  ADD_AFF_FAIL,\n  DELETE_AFF_SUCCESS,\n  DELETE_AFF_FAIL\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { loadUser } from './auth';\n\n// * ==================== EXPORTS ==================== *//\n\nexport const newAffirmation = (formData, history) => async dispatch => {\n  if (localStorage.token) setAuthToken(localStorage.token);\n\n  const {\n    text,\n    dateAdded,\n    affirmationType,\n    title,\n    dateAchieved,\n    madeMeFeel,\n    author\n  } = formData;\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  let body = {};\n  if (text) body.text = text;\n  if (dateAdded) body.dateAdded = dateAdded;\n  if (affirmationType) body.affirmationType = affirmationType;\n  if (title) body.title = title;\n  if (dateAchieved) body.dateAchieved = dateAchieved;\n  if (madeMeFeel) body.madeMeFeel = madeMeFeel;\n  if (author) body.author = author;\n\n  const jsonBody = JSON.stringify(body);\n\n  try {\n    if (body.madeMeFeel) {\n      var res = await axios.post('/api/aff/achievement', jsonBody, config);\n    } else {\n      res = await axios.post('/api/aff', jsonBody, config);\n    }\n\n    dispatch({ type: ADD_AFF_SUCCESS, payload: res.data });\n    dispatch(setNotice('You saved an affirmation! Add another?', 'success'));\n    dispatch(loadUser());\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setNotice(error.msg, 'danger')));\n    }\n\n    dispatch({ type: ADD_AFF_FAIL });\n  }\n};\n\nexport const deleteAffirmation = (affirmationType, id) => async dispatch => {\n  // * Bring in authToken\n  if (localStorage.token) setAuthToken(localStorage.token);\n\n  // * Create\n  let path = '/api/aff';\n\n  affirmationType === 'strength' && (path += `/strength/${id}`);\n  affirmationType === 'quote' && (path += `/quote/${id}`);\n  affirmationType === 'gratitude' && (path += `/gratitude/${id}`);\n  affirmationType === 'achievement' && (path += `/achievement/${id}`);\n\n  try {\n    const res = await axios.delete(path);\n    dispatch({ type: DELETE_AFF_SUCCESS, payload: res.data });\n    dispatch(setNotice('You successfully deleted an affirmation', 'success'));\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setNotice(error.msg, 'danger')));\n    }\n\n    dispatch({ type: DELETE_AFF_FAIL });\n  }\n};\n","// * ==================== REACT ==================== *//\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\n// * ==================== REDUX ==================== *//\nimport { connect } from 'react-redux';\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\n// * ==================== VIEW COMPONENTS ==================== *//\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Achievement = ({ newAffirmation, setNotice, count, history }) => {\n  const initState = {\n    text: '',\n    affirmationType: 'achievement',\n    title: '',\n    dateAchieved: '',\n    madeMeFeel: ''\n  };\n  const [formData, setFormData] = useState(initState);\n\n  const { text, title, dateAchieved, madeMeFeel } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    newAffirmation(formData, history);\n    setFormData(initState);\n  };\n\n  return (\n    <Row className='d-flex justify-content-center align-items-center'>\n      <Col\n        xs={12}\n        md={9}\n        className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form onSubmit={e => onSubmit(e)} autoComplete='off'>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''}What is an{' '}\n              <strong>achievement</strong> you are proud of?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Label htmlFor='title'>\n                Enter an achievement from your life&mdash;a moment you are\n                particularly proud of:\n              </Form.Label>\n              <Form.Control\n                type='text'\n                name='title'\n                placeholder='e.g.: I graduated from a coding bootcamp.'\n                onChange={e => onChange(e)}\n                value={title}\n                autoComplete='off'\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label htmlFor='text'>\n                Why did this moment make you proud?\n              </Form.Label>\n              <Form.Control\n                as='textarea'\n                name='text'\n                placeholder='e.g.: I challenged myself.'\n                onChange={e => onChange(e)}\n                value={text}\n                autoComplete='off'\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label htmlFor='madeMeFeel'>\n                With one or a few words, finish the sentence: This achievement\n                made me feel...\n              </Form.Label>\n              <Form.Control\n                type='text'\n                name='madeMeFeel'\n                placeholder='e.g.: Like I could do anything!'\n                onChange={e => onChange(e)}\n                value={madeMeFeel}\n                autoComplete='off'\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label htmlFor='dateAchieved'>Date Achieved:</Form.Label>\n              <Form.Control\n                type='date'\n                name='dateAchieved'\n                onChange={e => onChange(e)}\n                value={dateAchieved}\n                autoComplete='off'\n              />\n            </Form.Group>\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\n// * ==================== PROP TYPES ==================== *//\nAchievement.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(withRouter(Achievement));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Quote = ({ newAffirmation, setNotice, count, history }) => {\n  const initState = {\n    text: '',\n    affirmationType: 'quote',\n    author: ''\n  };\n\n  const [formData, setFormData] = useState(initState);\n\n  const { text, author } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    newAffirmation(formData, history);\n    setFormData({ text: '', author: '' });\n  };\n\n  return (\n    <Row className='d-flex justify-content-center align-items-center'>\n      <Col\n        xs={12}\n        md={10}\n        className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form onSubmit={e => onSubmit(e)} autoComplete='off'>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''}What is one of\n              your <strong>favorite quotes</strong>?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Label htmlFor='text'>Enter a quote below:</Form.Label>\n              <Form.Control\n                as='textarea'\n                name='text'\n                placeholder='e.g.: May the Force be with you'\n                onChange={e => onChange(e)}\n                value={text}\n                autoComplete='off'\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label htmlFor='author'>\n                Enter the quote's author:\n              </Form.Label>\n              <Form.Control\n                type='text'\n                name='author'\n                placeholder='e.g.: Yoda'\n                onChange={e => onChange(e)}\n                value={author}\n                autoComplete='off'\n              />\n            </Form.Group>\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\nQuote.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(withRouter(Quote));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Strength = ({ newAffirmation, setNotice, count, history }) => {\n  const initState = {\n    text: '',\n    affirmationType: 'strength'\n  };\n\n  const [formData, setFormData] = useState(initState);\n\n  const { text } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    newAffirmation(formData, history);\n    setFormData(initState);\n  };\n\n  return (\n    <Row className='d-flex justify-content-center align-items-center'>\n      <Col\n        xs={12}\n        md={8}\n        className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form onSubmit={e => onSubmit(e)} autoComplete='off'>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''} What is one of\n              your <strong>strengths</strong>?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Label htmlFor='text'>\n                Enter one of your strengths&mdash;a positive quality that you\n                recognize in yourself:\n              </Form.Label>\n              <Form.Control\n                type='text'\n                name='text'\n                placeholder='e.g.: I like to help others.'\n                onChange={e => onChange(e)}\n                value={text}\n                autoComplete='off'\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nStrength.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(withRouter(Strength));\n","// * ==================== REACT ==================== *//\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\n// * ==================== REDUX ==================== *//\nimport { connect } from 'react-redux';\nimport { newAffirmation } from '../../../../actions/aff';\nimport { setNotice } from '../../../../actions/notice';\n\n// * ==================== VIEW COMPONENTS ==================== *//\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport Notice from '../../../Notice';\n\nconst Gratitude = ({ newAffirmation, setNotice, count, history }) => {\n  const initState = {\n    text: '',\n    affirmationType: 'gratitude'\n  };\n  const [formData, setFormData] = useState(initState);\n\n  const { text } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    newAffirmation(formData, history);\n    setFormData(initState);\n  };\n\n  return (\n    <Row className='d-flex justify-content-center align-items-center'>\n      <Col\n        xs={12}\n        md={8}\n        className='d-flex justify-content-center align-items-center'>\n        <div className='form-container'>\n          <Form id='affForm' onSubmit={e => onSubmit(e)} autoComplete='off'>\n            <h2 className='text-center'>\n              {!count ? 'Enter your first affirmation! ' : ''}What is one thing\n              you're <strong>grateful</strong> for?\n            </h2>\n            <Notice />\n            <Form.Group>\n              <Form.Label htmlFor='text'>\n                Enter something you're grateful for:\n              </Form.Label>\n              <Form.Control\n                type='text'\n                name='text'\n                id='gratitudeText'\n                placeholder='e.g.: My dog.'\n                onChange={e => onChange(e)}\n                value={text}\n                autoComplete='off'\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Button variant='primary' type='submit' block>\n                Save\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\n// * ==================== PROP TYPES ==================== *//\nGratitude.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  count: state.auth.user.affirmations.count\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the maincomponent function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(withRouter(Gratitude));\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { newAffirmation } from '../../../actions/aff';\nimport { setNotice } from '../../../actions/notice';\n\nimport Achievement from './Forms/Achievement';\nimport Quote from './Forms/Quote';\nimport Strength from './Forms/Strength';\nimport Gratitude from './Forms/Gratitude';\n\nconst Affirm = ({ newAffirmation, setNotice }) => {\n  const [randComp, setRandComp] = useState();\n\n  useEffect(() => {\n    setRandComp(\n      [<Achievement />, <Strength />, <Quote />, <Gratitude />][\n        ~~(Math.random() * 4)\n      ]\n    );\n  }, []);\n\n  return randComp || '';\n};\n\nAffirm.propTypes = {\n  user: PropTypes.object.isRequired,\n  newAffirmation: PropTypes.func.isRequired,\n  setNotice: PropTypes.func.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  user: state.auth.user\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions.\n// ! Then you pass the main component function\n\nexport default connect(\n  mapStateToProps,\n  { newAffirmation, setNotice }\n)(Affirm);\n"],"sourceRoot":""}