{"version":3,"sources":["components/pages/user/Affirmation.js"],"names":["connect","state","affirmations","auth","user","_ref","_ref$affirmations","achievements","quotes","strengths","gratitudes","masterArray","length","forEach","a","push","q","s","g","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffler","_masterArray$","text","affirmationType","author","title","dateAchieved","madeMeFeel","imgSet","randImg","_useState","useState","_useState2","Object","_Users_daniel_Developer_uubc_sandbox_enough_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","imgReady","setImgReady","useEffect","img","Image","src","onload","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","Fragment","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","type","size","as","Link","to","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","Body","Title","Text","Img","variant","strength","gratitude","quote","react_moment__WEBPACK_IMPORTED_MODULE_2___default","format","add","days","react_bootstrap__WEBPACK_IMPORTED_MODULE_5__","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","xs","md","achievement"],"mappings":"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","file":"static/js/11.45f3e634.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\n\nimport { connect } from 'react-redux';\n\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst Affirmation = ({\n  affirmations: { achievements, quotes, strengths, gratitudes }\n}) => {\n  let masterArray = [];\n  if (achievements.length) achievements.forEach(a => masterArray.push(a));\n  if (quotes.length) quotes.forEach(q => masterArray.push(q));\n  if (strengths.length) strengths.forEach(s => masterArray.push(s));\n  if (gratitudes.length) gratitudes.forEach(g => masterArray.push(g));\n\n  const shuffler = array => {\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n  shuffler(masterArray);\n\n  // * Destructure affirmation object\n  const {\n    text,\n    affirmationType,\n    author,\n    title,\n    dateAchieved,\n    madeMeFeel\n  } = masterArray[0];\n\n  const imgSet = [\n    '../assets/img/affbg1.jpeg',\n    '../assets/img/affbg2.jpeg',\n    '../assets/img/affbg3.jpeg',\n    '../assets/img/affbg4.jpeg',\n    '../assets/img/affbg5.jpeg',\n    '../assets/img/affbg6.jpeg',\n    '../assets/img/affbg7.jpeg',\n    '../assets/img/affbg8.jpeg'\n  ];\n\n  const randImg = imgSet[[~~(Math.random() * imgSet.length)]];\n\n  const [imgReady, setImgReady] = useState(0);\n\n  useEffect(() => {\n    const img = new Image();\n    img.src = randImg;\n    img.onload = () => setImgReady(1);\n  }, [randImg]);\n\n  const strength = text => (\n    <>\n      <Card className='strCard'>\n        <Card.Body>\n          <Card.Title>\n            <h2>\n              You may not feel it now, but remember: you are{' '}\n              <strong>strong enough</strong>.\n            </h2>\n            <hr className='' />\n          </Card.Title>\n          <Card.Text as={'div'}>\n            <em>On a better day, you told us this:</em>\n            <div className='quote'>\n              I am <strong>strong</strong> because: &ldquo;{text}&rdquo;\n            </div>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img variant='bottom' src={randImg} />\n      </Card>\n    </>\n  );\n\n  const gratitude = text => (\n    <>\n      <Card className='gratCard'>\n        <Card.Body>\n          <Card.Title>\n            <h2>\n              Try to remember what you're <strong>grateful</strong> for.\n            </h2>\n            <hr className='' />\n          </Card.Title>\n          <Card.Text as={'div'}>\n            <em>On a better day, you told us this:</em>\n            <div className='quote'>\n              I am <strong>grateful</strong> for: &ldquo;{text}&rdquo;\n            </div>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img variant='bottom' src={randImg} />\n      </Card>\n    </>\n  );\n  const quote = (text, author) => (\n    <>\n      <Card className='quoteCard'>\n        <Card.Body>\n          <Card.Title>\n            <h2>\n              Here's one of your <strong>favorite quotes</strong> to brighten up\n              your day.\n            </h2>\n            <hr className='' />\n          </Card.Title>\n          <Card.Text as={'div'}>\n            <div className='quote'>&ldquo;{text}&rdquo;</div>\n            <div className='quote text-right'>&mdash;{author}</div>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img variant='bottom' src={randImg} />\n      </Card>\n    </>\n  );\n\n  const achievement = (title, text, dateAchieved, madeMeFeel) => (\n    <>\n      <Card className='achievementCard'>\n        <Card.Body>\n          <Card.Title>\n            <h2>\n              Look back at your <strong>accomplishments</strong>.\n            </h2>\n            <hr className='' />\n          </Card.Title>\n          <Card.Text as={'div'}>\n            <div>\n              <em>Remember this one?</em>\n            </div>\n            <div className='achievement title'>\n              I am proud because: &ldquo;{title}&rdquo;\n            </div>\n            <div className='achievement date'>\n              on{' '}\n              <Moment format='MMMM DD, YYYY' add={{ days: 1 }}>\n                {dateAchieved}\n              </Moment>\n            </div>\n            <Row>\n              <Col xs={12} md={6}>\n                <div className='achievement text'>\n                  What you said about it: &ldquo;{text}&rdquo;\n                </div>\n              </Col>\n              <Col xs={12} md={6}>\n                <div className='achievement text text-md-right'>\n                  How It Felt: &ldquo;{madeMeFeel}&rdquo;\n                </div>\n              </Col>\n            </Row>\n          </Card.Text>\n        </Card.Body>\n        <Card.Img variant='bottom' src={randImg} />\n      </Card>\n    </>\n  );\n\n  return imgReady ? (\n    <>\n      <div className='d-flex justify-content-center mb-5'>\n        <Button\n          type={null}\n          size={'lg'}\n          className='mr-3 btn action-button'\n          as={Link}\n          to='/affirm'>\n          Add New\n        </Button>\n        <Button\n          type={null}\n          size={'lg'}\n          className='btn action-button'\n          as={Link}\n          to='/affirmation'>\n          Show Me Another\n        </Button>\n      </div>\n      {affirmationType === 'strength'\n        ? strength(text)\n        : affirmationType === 'gratitude'\n        ? gratitude(text)\n        : affirmationType === 'quote'\n        ? quote(text, author)\n        : achievement(title, text, dateAchieved, madeMeFeel)}\n    </>\n  ) : (\n    ''\n  );\n};\n\nAffirmation.propTypes = {\n  affirmations: PropTypes.object.isRequired\n};\n\n// ! Get the information from state that we need from our reducer\nconst mapStateToProps = state => ({\n  affirmations: state.auth.user.affirmations\n});\n\n// ! Connect takes two parameters: 1. state that you want to map, 2. an object of actions\n\nexport default connect(mapStateToProps)(Affirmation);\n"],"sourceRoot":""}